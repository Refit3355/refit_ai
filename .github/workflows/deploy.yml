name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  IMAGE_NAME: refit-ai
  DOCKER_BUILDKIT: 1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Free up disk space (tools, android, dotnet, swap)
        uses: jlumbroso/free-disk-space@v1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true

      - name: Extra prune
        run: |
          docker system prune -af --volumes || true
          docker buildx prune -af || true
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet || true
          sudo df -h

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Enable buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Build & Push image
        env:
          ECR_REG: ${{ steps.ecr.outputs.registry }}
          REPO: ${{ secrets.ECR_REPOSITORY }}
        run: |
          TAG="${GITHUB_SHA}"
          docker buildx build \
            --platform linux/amd64 \
            -f Dockerfile \
            -t $ECR_REG/$REPO:$TAG \
            -t $ECR_REG/$REPO:latest \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --provenance=false \
            --sbom=false \
            --push .

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            ECR_REG="${{ steps.ecr.outputs.registry }}"
            REGION="${{ secrets.AWS_REGION }}"
            REPO="${{ secrets.ECR_REPOSITORY }}"
            IMG="$ECR_REG/$REPO:latest"

            aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ECR_REG"

            docker system prune -af --volumes || true

            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update
                sudo apt-get install -y docker-compose-plugin || sudo apt-get install -y docker-compose
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y docker-compose-plugin || sudo yum install -y docker-compose
              fi
              if docker compose version >/dev/null 2>&1; then
                DC="docker compose"
              else
                DC="docker-compose"
              fi
            fi

            docker pull "$IMG" || true

            cd /opt/refit-ai
            $DC pull
            $DC up -d --remove-orphans

            docker image prune -f || true
